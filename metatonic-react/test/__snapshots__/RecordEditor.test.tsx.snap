// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RecordEditor renders correctly with default/blank data 1`] = `
<div
  className="edit-Record edit-Home undefined-field"
>
  <div />
  <fieldset
    className="contain-Record contain-Address address-field"
  >
    <legend
      className="label-Record label-Address address-field"
    >
      Address
    </legend>
    <div
      className="edit-Record edit-Address address-field"
    >
      <div
        className="contain-text address1-field"
      >
        <label
          className="label-text address1-field"
          htmlFor="f1f0"
        >
          Address 1
        </label>
        <input
          className="input-text address1-field"
          data-fieldName="address1"
          id="f1f0"
          maxLength={undefined}
          name="address.address1"
          onChange={[Function]}
          required={undefined}
          type="text"
          value=""
        />
        <div
          className="error-list"
        />
      </div>
      <div
        className="contain-text address2-field"
      >
        <label
          className="label-text address2-field"
          htmlFor="f1f1"
        >
          Address 2
        </label>
        <input
          className="input-text address2-field"
          data-fieldName="address2"
          id="f1f1"
          maxLength={undefined}
          name="address.address2"
          onChange={[Function]}
          required={undefined}
          type="text"
          value=""
        />
        <div
          className="error-list"
        />
      </div>
      <div
        className="contain-text city-field"
      >
        <label
          className="label-text city-field"
          htmlFor="f1f2"
        >
          City
        </label>
        <input
          className="input-text city-field"
          data-fieldName="city"
          id="f1f2"
          maxLength={undefined}
          name="address.city"
          onChange={[Function]}
          required={undefined}
          type="text"
          value=""
        />
        <div
          className="error-list"
        />
      </div>
      <div
        className="contain-text state-field"
      >
        <label
          className="label-text state-field"
          htmlFor="f1f3"
        >
          State
        </label>
        <input
          className="input-text state-field"
          data-fieldName="state"
          id="f1f3"
          maxLength={2}
          name="address.state"
          onChange={[Function]}
          required={undefined}
          type="text"
          value=""
        />
        <div
          className="error-list"
        />
      </div>
      <div
        className="contain-text zip-field"
      >
        <label
          className="label-text zip-field"
          htmlFor="f1f4"
        >
          Zip
        </label>
        <input
          className="input-text zip-field"
          data-fieldName="zip"
          id="f1f4"
          maxLength={undefined}
          name="address.zip"
          onChange={[Function]}
          required={undefined}
          type="text"
          value=""
        />
        <div
          className="error-list"
        />
      </div>
    </div>
    <div
      className="error-list"
    />
  </fieldset>
  <div />
  <div
    className="contain-DateTime contain-date datePutOnSale-field"
  >
    <label
      className="label-DateTime label-date datePutOnSale-field"
      htmlFor="f3"
    >
      Date Put On Sale
    </label>
    <input
      className="input-DateTime input-date datePutOnSale-field"
      data-fieldName="datePutOnSale"
      id="f3"
      max={undefined}
      min={undefined}
      name="datePutOnSale"
      onChange={[Function]}
      required={undefined}
      type="date"
      value=""
    />
    <div
      className="error-list"
    />
  </div>
  <div
    className="contain-Numeric contain-Integer numberOfBedRooms-field"
  >
    <label
      className="label-Numeric label-Integer numberOfBedRooms-field"
      htmlFor="f4"
    >
      Bed Rooms
    </label>
    <input
      className="input-Numeric input-Integer numberOfBedRooms-field"
      data-fieldName="numberOfBedRooms"
      id="f4"
      max={undefined}
      min="0"
      name="numberOfBedRooms"
      onChange={[Function]}
      required={undefined}
      step={1}
      type="number"
      value=""
    />
    <div
      className="error-list"
    />
  </div>
</div>
`;

exports[`RecordEditor renders correctly with fully filled data 1`] = `
<div
  className="edit-Record edit-Home undefined-field"
>
  <div />
  <fieldset
    className="contain-Record contain-Address address-field"
  >
    <legend
      className="label-Record label-Address address-field"
    >
      Address
    </legend>
    <div
      className="edit-Record edit-Address address-field"
    >
      <div
        className="contain-text address1-field"
      >
        <label
          className="label-text address1-field"
          htmlFor="f1f0"
        >
          Address 1
        </label>
        <input
          className="input-text address1-field"
          data-fieldName="address1"
          id="f1f0"
          maxLength={undefined}
          name="address.address1"
          onChange={[Function]}
          required={undefined}
          type="text"
          value="123 My Place"
        />
        <div
          className="error-list"
        />
      </div>
      <div
        className="contain-text address2-field"
      >
        <label
          className="label-text address2-field"
          htmlFor="f1f1"
        >
          Address 2
        </label>
        <input
          className="input-text address2-field"
          data-fieldName="address2"
          id="f1f1"
          maxLength={undefined}
          name="address.address2"
          onChange={[Function]}
          required={undefined}
          type="text"
          value=""
        />
        <div
          className="error-list"
        />
      </div>
      <div
        className="contain-text city-field"
      >
        <label
          className="label-text city-field"
          htmlFor="f1f2"
        >
          City
        </label>
        <input
          className="input-text city-field"
          data-fieldName="city"
          id="f1f2"
          maxLength={undefined}
          name="address.city"
          onChange={[Function]}
          required={undefined}
          type="text"
          value="Pittsburgh"
        />
        <div
          className="error-list"
        />
      </div>
      <div
        className="contain-text state-field"
      >
        <label
          className="label-text state-field"
          htmlFor="f1f3"
        >
          State
        </label>
        <input
          className="input-text state-field"
          data-fieldName="state"
          id="f1f3"
          maxLength={2}
          name="address.state"
          onChange={[Function]}
          required={undefined}
          type="text"
          value="PA"
        />
        <div
          className="error-list"
        />
      </div>
      <div
        className="contain-text zip-field"
      >
        <label
          className="label-text zip-field"
          htmlFor="f1f4"
        >
          Zip
        </label>
        <input
          className="input-text zip-field"
          data-fieldName="zip"
          id="f1f4"
          maxLength={undefined}
          name="address.zip"
          onChange={[Function]}
          required={undefined}
          type="text"
          value="15224"
        />
        <div
          className="error-list"
        />
      </div>
    </div>
    <div
      className="error-list"
    />
  </fieldset>
  <div />
  <div
    className="contain-DateTime contain-date datePutOnSale-field"
  >
    <label
      className="label-DateTime label-date datePutOnSale-field"
      htmlFor="f3"
    >
      Date Put On Sale
    </label>
    <input
      className="input-DateTime input-date datePutOnSale-field"
      data-fieldName="datePutOnSale"
      id="f3"
      max={undefined}
      min={undefined}
      name="datePutOnSale"
      onChange={[Function]}
      required={undefined}
      type="date"
      value="03/30/2018"
    />
    <div
      className="error-list"
    />
  </div>
  <div
    className="contain-Numeric contain-Integer numberOfBedRooms-field"
  >
    <label
      className="label-Numeric label-Integer numberOfBedRooms-field"
      htmlFor="f4"
    >
      Bed Rooms
    </label>
    <input
      className="input-Numeric input-Integer numberOfBedRooms-field"
      data-fieldName="numberOfBedRooms"
      id="f4"
      max={undefined}
      min="0"
      name="numberOfBedRooms"
      onChange={[Function]}
      required={undefined}
      step={1}
      type="number"
      value="2"
    />
    <div
      className="error-list"
    />
  </div>
</div>
`;
